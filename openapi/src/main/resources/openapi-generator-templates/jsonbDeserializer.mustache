
  public static final class Deserializer implements JsonbDeserializer<{{classname}}> {

    private static final Jsonb JSONB = CDI.current().select(Jsonb.class).get();

    private static final Map<String, Class<? extends {{classname}}>> CLASSES = new LinkedHashMap<>();

    private static final Map<Class<? extends {{classname}}>, String> KEYS;

    static {
      {{#discriminator.mappedModels}}
      CLASSES.put("{{mappingName}}", {{modelName}}.class);
      {{/discriminator.mappedModels}}
      KEYS = CLASSES.entrySet().stream().collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));
    }

    @Override
    public {{classname}} deserialize(final JsonParser jsonParser, final DeserializationContext deserializationContext, final Type type) {
      final var jsonObject = jsonParser.getObject();
      final var discriminator = jsonObject.getString("{{discriminator.propertyBaseName}}", "UNSET");
      final var modelClass = CLASSES.getOrDefault(discriminator, {{classname}}.class);
      return JSONB.fromJson(jsonObject.toString(), {{classname}}.class.equals(modelClass) ? {{classname}}.Root.class : modelClass);
    }
  }

  /**
   * This class is needed to avoid stack overflow error when class is mapped
   * to the root <code>{{classname}}</code> class
   */
   public static final class Root extends {{classname}} {
   }
